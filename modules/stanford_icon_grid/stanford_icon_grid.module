<?php

/**
 * @file
 * Code for the Stanford Icon Grid Block feature.
 */

include_once 'stanford_icon_grid.features.inc';

/**
 * Implements hook_field_is_empty().
 */
function stanford_icon_grid_field_is_empty($item, $field) {
  if (empty($item['icon'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_info().
 */
function stanford_icon_grid_field_info() {
  return array(
    'fontawesome_icon' => array(
      'label' => t('Font Awesome Icon'),
      'description' => t('This field stores varchar text in the database.'),
      'default_widget' => 'fontawesome_icon_widget',
      'default_formatter' => 'fontawesome_icon_formatter',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function stanford_icon_grid_field_widget_info() {
  return array(
    'fontawesome_icon_widget' => array(
      'label' => t('Font Awesome Icon'),
      'field types' => array('fontawesome_icon'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function stanford_icon_grid_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $icon = array(
    '#type' => 'select',
    '#options' => stanford_icon_grid_get_icons(),
    '#attributes' => array('class' => array('stanford-fontawesome-icon')),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'stanford_icon_grid') . '/css/fontawesome/stanford_fa.css',
      ),
      'js' => array(
        drupal_get_path('module', 'stanford_icon_grid') . '/js/stanford_icon_grid.js',
      ),
    ),
    '#default_value' => $items[$delta]['icon'],
  );
  return array('icon' => $element + $icon);
}

/**
 * Gets available font awesome icons from the json file.
 *
 * @return array
 *   Font awesome options in groups.
 */
function stanford_icon_grid_get_icons() {
  // If data is cached, return the data.
  if ($cache = cache_get('stanford_icon_grid_icons')) {
    return $cache->data;
  }

  // Get json data and set cache.
  $fa_icons = drupal_get_path('module', 'stanford_icon_grid') . '/css/font-awesome.json';
  $fa_icons = drupal_json_decode(file_get_contents($fa_icons));
  cache_set('stanford_icon_grid_icons', $fa_icons);
  return $fa_icons;
}

/**
 * Implements hook_field_formatter_info().
 */
function stanford_icon_grid_field_formatter_info() {
  return array(
    'fontawesome_icon_formatter' => array(
      'label' => t('Font Awesome Icons'),
      'field types' => array('fontawesome_icon'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function stanford_icon_grid_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    if (isset($item['icon'])) {

      // Builds font awesome tag <i class="fa fa-{value}" aria-hidden="true"/>.
      $element[$delta] = array(
        '#theme' => 'html_tag',
        '#tag' => 'i',
        '#value' => '',
        '#attributes' => array(
          'class' => array('fa', 'fa-' . $item['icon']),
          'aria-hidden' => array("true"),
        ),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'stanford_icon_grid') . '/css/fontawesome/stanford_fa.css',
            drupal_get_path('module', 'stanford_icon_grid') . '/css/stanford_icon_grid.css',
          ),
        ),
      );
    }
  }
  return $element;
}

/**
 * Implements hook_preprocess_field().
 */
function stanford_icon_grid_preprocess_field(&$vars) {
  if ($vars['element']['#field_name'] == 'field_s_icon_ext_columns') {
    $offset = 0;

    // If not a multiple of 3, set the offset to center the field item.
    if (count($vars['items']) % 3) {
      $offset = -2 * (count($vars['items']) % 3 - 3);
    }

    foreach ($vars['items'] as $delta => &$item) {
      $item['#attributes']['class'][] = 'span4';

      // Sets the offset to the first item of the last group of 3. Ex:
      // 1 or 2 items - the very first will get the offset. 4 or 5 - the 4th
      // item will get the offset and so on.
      if ($offset && !($delta % 3) && count($vars['items']) - $delta < 3) {
        $item['#attributes']['class'][] = "offset$offset";
      }
    }
  }
}

/**
 * Implements hook_entity_view().
 */
function stanford_icon_grid_entity_view($entity, $type, $view_mode, $langcode) {
  // Escape if its not the entity we want.
  if ($type != 'field_collection_item' || $entity->field_name != 'field_s_icon_ext_columns') {
    return;
  }

  // Only want to use the color, but not display it.
  unset($entity->content['field_s_icon_ext_columns_bg_colo']);
  $bg_colors = field_get_items($type, $entity, 'field_s_icon_ext_columns_bg_colo');
  $style = '';

  // Allows for #background,#font color pair even if background is empty.
  if (strpos(reset($bg_colors[0]), ',') !== FALSE) {
    list($bg_color, $color) = explode(',', reset($bg_colors[0]));

    // Validate a correct hex value for background color.
    if (preg_match('/^#[a-f0-9]{6}$/i', $bg_color)) {
      $style = "background-color: $bg_color;";
    }

    // Validate a correct hex value for font color.
    if (preg_match('/^#[a-f0-9]{6}$/i', $color)) {
      $style .= " color: $color;";
    }
  }
  else {
    // Only one value provided making it the background color.
    $bg_color = reset($bg_colors[0]);

    // Validate a correct hex value for background color.
    if (preg_match('/^#[a-f0-9]{6}$/i', $bg_color)) {
      $style = "background-color: $bg_color;";
    }
  }

  // Apply inline styles.
  $entity->content['field_s_icon_ext_columns_up_icon'][0]['#item']['attributes']['style'][] = $style;
  $entity->content['field_s_icon_ext_columns_fa_icon'][0]['#attributes']['style'][] = $style;

  // If iamge icon is provided, hide the font awesome icon.
  if (!empty($entity->field_s_icon_ext_columns_up_icon)) {
    unset($entity->content['field_s_icon_ext_columns_fa_icon']);
  }
  else {
    // Ensure the image icon is not visible if its empty.
    unset($entity->content['field_s_icon_ext_columns_up_icon']);
  }

}

/**
 * Implements hook_theme_registry_alter().
 *
 * @see https://www.drupal.org/docs/7/creating-custom-modules/howtos/using-template-tplphp-files-in-your-own-module
 */
function stanford_icon_grid_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'stanford_icon_grid');
  $template_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  foreach ($template_objects as $key => $template_object) {
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}
